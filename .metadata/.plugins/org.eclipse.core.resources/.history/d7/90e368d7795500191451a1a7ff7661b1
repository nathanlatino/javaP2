package com.mygdx.game;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.Input.Orientation;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.maps.MapLayer;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TiledMapRenderer;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile;
import com.badlogic.gdx.math.Vector3;

enum Orient{LEFT,RIGHT,UP,DOWN,NONE;}

public class MyGame extends ApplicationAdapter implements InputProcessor {
	Texture img;
	TiledMap tiledMap;
	OrthographicCamera camera;
	TiledMapRenderer tiledMapRenderer;
	Orient orientation = Orient.NONE;
	SpriteBatch sb;
	Texture texture;
	Sprite sprite;

	@Override
	public void create() {
		float w = Gdx.graphics.getWidth();
		float h = Gdx.graphics.getHeight();
		
		
		camera = new OrthographicCamera();
		camera.setToOrtho(false, w, h);
		camera.update();
		tiledMap = new TmxMapLoader().load("mainMap.tmx");
		tiledMapRenderer = new OrthogonalTiledMapRenderer(tiledMap);
		Gdx.input.setInputProcessor(this);

		sb = new SpriteBatch();
		texture = new Texture("pik.png");
		sprite = new Sprite(texture);

		// Get the width and height of our maps
		// Then halve it, as our sprites are 64x64 not 32x32 that our map is made of
		int mapWidth = tiledMap.getProperties().get("width", Integer.class) / 2;
		int mapHeight = tiledMap.getProperties().get("height", Integer.class) / 2;

		// Create a new map layer
		TiledMapTileLayer tileLayer = new TiledMapTileLayer(mapWidth, mapHeight, 64, 64);

		// Create a cell(tile) to add to the layer
		TiledMapTileLayer.Cell cell = new TiledMapTileLayer.Cell();

		// The sprite/tilesheet behind our new layer is a single image (our sprite)
		// Create a TextureRegion that is the entire size of our texture
		TextureRegion textureRegion = new TextureRegion(texture, 64, 64);

		// Now set the graphic for our cell to our newly created region
		cell.setTile(new StaticTiledMapTile(textureRegion));

		// Now set the cell at position 4,10 ( 8,20 in map coordinates ). This is the
		// position of a tree
		// Relative to 0,0 in our map which is the bottom left corner
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 5; j++) {
				tileLayer.setCell(i, j, cell);
			}
		}

		// Ok, I admit, this part is a gross hack.
		// Get the current top most layer from the map and store it
		MapLayer tempLayer = tiledMap.getLayers().get(tiledMap.getLayers().getCount() - 1);
		// Now remove it
		tiledMap.getLayers().remove(tiledMap.getLayers().getCount() - 1);
		// Now add our newly created layer
		tiledMap.getLayers().add(tileLayer);
		// Now add it back, now our new layer is not the top most one.
		tiledMap.getLayers().add(tempLayer);
	}

	@Override
	public void render() {
		Gdx.gl.glClearColor(120, 180, 150, 10);
		Gdx.gl.glBlendFunc(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		camera.update();
		tiledMapRenderer.setView(camera);
		tiledMapRenderer.render();

		sb.setProjectionMatrix(camera.combined);
		sb.begin();
		sprite.draw(sb);
		sb.end();

	}

	@Override
	public void dispose() {
		img.dispose();
	}

	@Override
	public boolean keyDown(int keycode) {
		if (keycode == Input.Keys.LEFT)
			camera.translate(-32, 0);
		if (keycode == Input.Keys.RIGHT)
			camera.translate(32, 0);
		if (keycode == Input.Keys.UP)
			camera.translate(0, 32);
		if (keycode == Input.Keys.DOWN)
			camera.translate(0, -32);
		if (keycode == Input.Keys.NUM_1)
			tiledMap.getLayers().get(0).setVisible(!tiledMap.getLayers().get(0).isVisible());
		if (keycode == Input.Keys.NUM_2)
			tiledMap.getLayers().get(1).setVisible(!tiledMap.getLayers().get(1).isVisible());
		if (keycode == Input.Keys.NUM_3)
			tiledMap.getLayers().get(2).setVisible(!tiledMap.getLayers().get(2).isVisible());
		if (keycode == Input.Keys.NUM_4)
			tiledMap.getLayers().get(3).setVisible(!tiledMap.getLayers().get(3).isVisible());
		if (keycode == Input.Keys.W)
			Orientation = Orient.UP;
			sprite.setPosition(sprite.getX()-8, sprite.getY());
		if (keycode == Input.Keys.A)
			sprite.setPosition(sprite.getX()-8, sprite.getY());
		if (keycode == Input.Keys.S)
			sprite.setPosition(sprite.getX(), sprite.getY()-8);
		if (keycode == Input.Keys.D)
			sprite.setPosition(sprite.getX()+8, sprite.getY());
			return false;
	}

	@Override
	public boolean keyUp(int keycode) {

		return false;
	}

	@Override
	public boolean keyTyped(char character) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
		Vector3 clickCoordinates = new Vector3(screenX, screenY, 0);
		Vector3 position = camera.unproject(clickCoordinates);
		sprite.setPosition(position.x - 32, position.y - 32);
		return true;
	}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		Vector3 clickCoordinates = new Vector3(screenX, screenY, 0);
		Vector3 position = camera.unproject(clickCoordinates);
		sprite.setPosition(position.x - 32, position.y - 32);
		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean scrolled(int amount) {
		if (amount == 1) {
			camera.zoom += .2f;
		} else if (amount == -1) {
			camera.zoom -= .2f;
		}
		return false;
	}
}
